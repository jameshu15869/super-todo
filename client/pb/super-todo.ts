/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.22.3
 * source: super-todo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace supertodo {
    export class JsonError extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            message?: string;
            timestamp?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            message?: string;
            timestamp?: string;
        }): JsonError {
            const message = new JsonError({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                message?: string;
                timestamp?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (this.timestamp.length)
                writer.writeString(3, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JsonError {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JsonError();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 3:
                        message.timestamp = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JsonError {
            return JsonError.deserialize(bytes);
        }
    }
    export class Health extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): Health {
            const message = new Health({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Health {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Health();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Health {
            return Health.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: number;
            username?: string;
        }): User {
            const message = new User({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                username?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class UserWithTodos extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            todos?: Todos;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get todos() {
            return pb_1.Message.getWrapperField(this, Todos, 2) as Todos;
        }
        set todos(value: Todos) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_todos() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            todos?: ReturnType<typeof Todos.prototype.toObject>;
        }): UserWithTodos {
            const message = new UserWithTodos({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.todos != null) {
                message.todos = Todos.fromObject(data.todos);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                todos?: ReturnType<typeof Todos.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.todos != null) {
                data.todos = this.todos.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_todos)
                writer.writeMessage(2, this.todos, () => this.todos.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserWithTodos {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserWithTodos();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.todos, () => message.todos = Todos.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserWithTodos {
            return UserWithTodos.deserialize(bytes);
        }
    }
    export class PutUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            username?: string;
        }): PutUser {
            const message = new PutUser({});
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutUser {
            return PutUser.deserialize(bytes);
        }
    }
    export class Users extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            users?: User[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get users() {
            return pb_1.Message.getRepeatedWrapperField(this, User, 1) as User[];
        }
        set users(value: User[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            users?: ReturnType<typeof User.prototype.toObject>[];
        }): Users {
            const message = new Users({});
            if (data.users != null) {
                message.users = data.users.map(item => User.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                users?: ReturnType<typeof User.prototype.toObject>[];
            } = {};
            if (this.users != null) {
                data.users = this.users.map((item: User) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.users.length)
                writer.writeRepeatedMessage(1, this.users, (item: User) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Users {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Users();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.users, () => pb_1.Message.addToRepeatedWrapperField(message, 1, User.deserialize(reader), User));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Users {
            return Users.deserialize(bytes);
        }
    }
    export class SingleUserIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: number;
        }): SingleUserIDRequest {
            const message = new SingleUserIDRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleUserIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleUserIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleUserIDRequest {
            return SingleUserIDRequest.deserialize(bytes);
        }
    }
    export class Todo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            title?: string;
            todo_date?: string;
            body?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("todo_date" in data && data.todo_date != undefined) {
                    this.todo_date = data.todo_date;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get todo_date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set todo_date(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: number;
            title?: string;
            todo_date?: string;
            body?: string;
        }): Todo {
            const message = new Todo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.todo_date != null) {
                message.todo_date = data.todo_date;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                title?: string;
                todo_date?: string;
                body?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.todo_date != null) {
                data.todo_date = this.todo_date;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.todo_date.length)
                writer.writeString(3, this.todo_date);
            if (this.body.length)
                writer.writeString(4, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Todo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Todo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.todo_date = reader.readString();
                        break;
                    case 4:
                        message.body = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Todo {
            return Todo.deserialize(bytes);
        }
    }
    export class TodoWithUsers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo?: Todo;
            users?: Users;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo" in data && data.todo != undefined) {
                    this.todo = data.todo;
                }
                if ("users" in data && data.users != undefined) {
                    this.users = data.users;
                }
            }
        }
        get todo() {
            return pb_1.Message.getWrapperField(this, Todo, 1) as Todo;
        }
        set todo(value: Todo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_todo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get users() {
            return pb_1.Message.getWrapperField(this, Users, 2) as Users;
        }
        set users(value: Users) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_users() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            todo?: ReturnType<typeof Todo.prototype.toObject>;
            users?: ReturnType<typeof Users.prototype.toObject>;
        }): TodoWithUsers {
            const message = new TodoWithUsers({});
            if (data.todo != null) {
                message.todo = Todo.fromObject(data.todo);
            }
            if (data.users != null) {
                message.users = Users.fromObject(data.users);
            }
            return message;
        }
        toObject() {
            const data: {
                todo?: ReturnType<typeof Todo.prototype.toObject>;
                users?: ReturnType<typeof Users.prototype.toObject>;
            } = {};
            if (this.todo != null) {
                data.todo = this.todo.toObject();
            }
            if (this.users != null) {
                data.users = this.users.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_todo)
                writer.writeMessage(1, this.todo, () => this.todo.serialize(writer));
            if (this.has_users)
                writer.writeMessage(2, this.users, () => this.users.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TodoWithUsers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TodoWithUsers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todo, () => message.todo = Todo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.users, () => message.users = Users.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TodoWithUsers {
            return TodoWithUsers.deserialize(bytes);
        }
    }
    export class PutTodo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            todo_date?: string;
            body?: string;
            user_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("todo_date" in data && data.todo_date != undefined) {
                    this.todo_date = data.todo_date;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
                if ("user_ids" in data && data.user_ids != undefined) {
                    this.user_ids = data.user_ids;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get todo_date() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set todo_date(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user_ids() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set user_ids(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            title?: string;
            todo_date?: string;
            body?: string;
            user_ids?: number[];
        }): PutTodo {
            const message = new PutTodo({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.todo_date != null) {
                message.todo_date = data.todo_date;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            if (data.user_ids != null) {
                message.user_ids = data.user_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                todo_date?: string;
                body?: string;
                user_ids?: number[];
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.todo_date != null) {
                data.todo_date = this.todo_date;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            if (this.user_ids != null) {
                data.user_ids = this.user_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.todo_date.length)
                writer.writeString(2, this.todo_date);
            if (this.body.length)
                writer.writeString(3, this.body);
            if (this.user_ids.length)
                writer.writePackedInt32(4, this.user_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PutTodo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PutTodo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.todo_date = reader.readString();
                        break;
                    case 3:
                        message.body = reader.readString();
                        break;
                    case 4:
                        message.user_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PutTodo {
            return PutTodo.deserialize(bytes);
        }
    }
    export class Todos extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todos?: Todo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todos" in data && data.todos != undefined) {
                    this.todos = data.todos;
                }
            }
        }
        get todos() {
            return pb_1.Message.getRepeatedWrapperField(this, Todo, 1) as Todo[];
        }
        set todos(value: Todo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            todos?: ReturnType<typeof Todo.prototype.toObject>[];
        }): Todos {
            const message = new Todos({});
            if (data.todos != null) {
                message.todos = data.todos.map(item => Todo.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                todos?: ReturnType<typeof Todo.prototype.toObject>[];
            } = {};
            if (this.todos != null) {
                data.todos = this.todos.map((item: Todo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todos.length)
                writer.writeRepeatedMessage(1, this.todos, (item: Todo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Todos {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Todos();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.todos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Todo.deserialize(reader), Todo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Todos {
            return Todos.deserialize(bytes);
        }
    }
    export class Combined extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
            user_id?: number;
            todo_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("todo_id" in data && data.todo_id != undefined) {
                    this.todo_id = data.todo_id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get todo_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set todo_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: number;
            user_id?: number;
            todo_id?: number;
        }): Combined {
            const message = new Combined({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.todo_id != null) {
                message.todo_id = data.todo_id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
                user_id?: number;
                todo_id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.todo_id != null) {
                data.todo_id = this.todo_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt32(1, this.id);
            if (this.user_id != 0)
                writer.writeInt32(2, this.user_id);
            if (this.todo_id != 0)
                writer.writeInt32(3, this.todo_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Combined {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Combined();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt32();
                        break;
                    case 2:
                        message.user_id = reader.readInt32();
                        break;
                    case 3:
                        message.todo_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Combined {
            return Combined.deserialize(bytes);
        }
    }
    export class SingleTodoIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo_id" in data && data.todo_id != undefined) {
                    this.todo_id = data.todo_id;
                }
            }
        }
        get todo_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set todo_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            todo_id?: number;
        }): SingleTodoIDRequest {
            const message = new SingleTodoIDRequest({});
            if (data.todo_id != null) {
                message.todo_id = data.todo_id;
            }
            return message;
        }
        toObject() {
            const data: {
                todo_id?: number;
            } = {};
            if (this.todo_id != null) {
                data.todo_id = this.todo_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todo_id != 0)
                writer.writeInt32(1, this.todo_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SingleTodoIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SingleTodoIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.todo_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SingleTodoIDRequest {
            return SingleTodoIDRequest.deserialize(bytes);
        }
    }
    export class MultipleUserIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ids" in data && data.user_ids != undefined) {
                    this.user_ids = data.user_ids;
                }
            }
        }
        get user_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set user_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ids?: number[];
        }): MultipleUserIDRequest {
            const message = new MultipleUserIDRequest({});
            if (data.user_ids != null) {
                message.user_ids = data.user_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ids?: number[];
            } = {};
            if (this.user_ids != null) {
                data.user_ids = this.user_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ids.length)
                writer.writePackedInt32(1, this.user_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleUserIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleUserIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultipleUserIDRequest {
            return MultipleUserIDRequest.deserialize(bytes);
        }
    }
    export class MultipleTodoIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo_ids" in data && data.todo_ids != undefined) {
                    this.todo_ids = data.todo_ids;
                }
            }
        }
        get todo_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set todo_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            todo_ids?: number[];
        }): MultipleTodoIDRequest {
            const message = new MultipleTodoIDRequest({});
            if (data.todo_ids != null) {
                message.todo_ids = data.todo_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                todo_ids?: number[];
            } = {};
            if (this.todo_ids != null) {
                data.todo_ids = this.todo_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todo_ids.length)
                writer.writePackedInt32(1, this.todo_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleTodoIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleTodoIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.todo_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultipleTodoIDRequest {
            return MultipleTodoIDRequest.deserialize(bytes);
        }
    }
    export class TodosFromUserIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo_ids" in data && data.todo_ids != undefined) {
                    this.todo_ids = data.todo_ids;
                }
            }
        }
        get todo_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set todo_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            todo_ids?: number[];
        }): TodosFromUserIdResponse {
            const message = new TodosFromUserIdResponse({});
            if (data.todo_ids != null) {
                message.todo_ids = data.todo_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                todo_ids?: number[];
            } = {};
            if (this.todo_ids != null) {
                data.todo_ids = this.todo_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todo_ids.length)
                writer.writePackedInt32(1, this.todo_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TodosFromUserIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TodosFromUserIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.todo_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TodosFromUserIdResponse {
            return TodosFromUserIdResponse.deserialize(bytes);
        }
    }
    export class UsersFromTodoIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_ids" in data && data.user_ids != undefined) {
                    this.user_ids = data.user_ids;
                }
            }
        }
        get user_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set user_ids(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_ids?: number[];
        }): UsersFromTodoIdResponse {
            const message = new UsersFromTodoIdResponse({});
            if (data.user_ids != null) {
                message.user_ids = data.user_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                user_ids?: number[];
            } = {};
            if (this.user_ids != null) {
                data.user_ids = this.user_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_ids.length)
                writer.writePackedInt32(1, this.user_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsersFromTodoIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsersFromTodoIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsersFromTodoIdResponse {
            return UsersFromTodoIdResponse.deserialize(bytes);
        }
    }
    export class CombinedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: number;
            todo_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("todo_id" in data && data.todo_id != undefined) {
                    this.todo_id = data.todo_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set user_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get todo_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set todo_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user_id?: number;
            todo_id?: number;
        }): CombinedRequest {
            const message = new CombinedRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.todo_id != null) {
                message.todo_id = data.todo_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: number;
                todo_id?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.todo_id != null) {
                data.todo_id = this.todo_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id != 0)
                writer.writeInt32(1, this.user_id);
            if (this.todo_id != 0)
                writer.writeInt32(2, this.todo_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CombinedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CombinedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readInt32();
                        break;
                    case 2:
                        message.todo_id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CombinedRequest {
            return CombinedRequest.deserialize(bytes);
        }
    }
    export class MultipleCombined extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            combines?: Combined[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("combines" in data && data.combines != undefined) {
                    this.combines = data.combines;
                }
            }
        }
        get combines() {
            return pb_1.Message.getRepeatedWrapperField(this, Combined, 1) as Combined[];
        }
        set combines(value: Combined[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            combines?: ReturnType<typeof Combined.prototype.toObject>[];
        }): MultipleCombined {
            const message = new MultipleCombined({});
            if (data.combines != null) {
                message.combines = data.combines.map(item => Combined.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                combines?: ReturnType<typeof Combined.prototype.toObject>[];
            } = {};
            if (this.combines != null) {
                data.combines = this.combines.map((item: Combined) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.combines.length)
                writer.writeRepeatedMessage(1, this.combines, (item: Combined) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleCombined {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleCombined();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.combines, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Combined.deserialize(reader), Combined));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultipleCombined {
            return MultipleCombined.deserialize(bytes);
        }
    }
    export class CombinedArrayRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            todo_id?: number;
            user_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("todo_id" in data && data.todo_id != undefined) {
                    this.todo_id = data.todo_id;
                }
                if ("user_ids" in data && data.user_ids != undefined) {
                    this.user_ids = data.user_ids;
                }
            }
        }
        get todo_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set todo_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set user_ids(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            todo_id?: number;
            user_ids?: number[];
        }): CombinedArrayRequest {
            const message = new CombinedArrayRequest({});
            if (data.todo_id != null) {
                message.todo_id = data.todo_id;
            }
            if (data.user_ids != null) {
                message.user_ids = data.user_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                todo_id?: number;
                user_ids?: number[];
            } = {};
            if (this.todo_id != null) {
                data.todo_id = this.todo_id;
            }
            if (this.user_ids != null) {
                data.user_ids = this.user_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.todo_id != 0)
                writer.writeInt32(1, this.todo_id);
            if (this.user_ids.length)
                writer.writePackedInt32(2, this.user_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CombinedArrayRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CombinedArrayRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.todo_id = reader.readInt32();
                        break;
                    case 2:
                        message.user_ids = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CombinedArrayRequest {
            return CombinedArrayRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedUserServiceService {
        static definition = {
            PingHealth: {
                path: "/supertodo.UserService/PingHealth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Health) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Health.deserialize(new Uint8Array(bytes))
            },
            GetAllUsers: {
                path: "/supertodo.UserService/GetAllUsers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Users) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Users.deserialize(new Uint8Array(bytes))
            },
            GetUserById: {
                path: "/supertodo.UserService/GetUserById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleUserIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleUserIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            GetUsersByMultipleIds: {
                path: "/supertodo.UserService/GetUsersByMultipleIds",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MultipleUserIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MultipleUserIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Users) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Users.deserialize(new Uint8Array(bytes))
            },
            UpdateUserById: {
                path: "/supertodo.UserService/UpdateUserById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: User) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            AddUser: {
                path: "/supertodo.UserService/AddUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: User) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            },
            DeleteUser: {
                path: "/supertodo.UserService/DeleteUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleUserIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleUserIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => User.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract PingHealth(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, Health>, callback: grpc_1.sendUnaryData<Health>): void;
        abstract GetAllUsers(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, Users>, callback: grpc_1.sendUnaryData<Users>): void;
        abstract GetUserById(call: grpc_1.ServerUnaryCall<SingleUserIDRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract GetUsersByMultipleIds(call: grpc_1.ServerUnaryCall<MultipleUserIDRequest, Users>, callback: grpc_1.sendUnaryData<Users>): void;
        abstract UpdateUserById(call: grpc_1.ServerUnaryCall<User, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract AddUser(call: grpc_1.ServerUnaryCall<User, User>, callback: grpc_1.sendUnaryData<User>): void;
        abstract DeleteUser(call: grpc_1.ServerUnaryCall<SingleUserIDRequest, User>, callback: grpc_1.sendUnaryData<User>): void;
    }
    export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        PingHealth: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, Health> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Health>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Health>, callback?: grpc_1.requestCallback<Health>): grpc_1.ClientUnaryCall => {
            return super.PingHealth(message, metadata, options, callback);
        };
        GetAllUsers: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, Users> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Users>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Users>, callback?: grpc_1.requestCallback<Users>): grpc_1.ClientUnaryCall => {
            return super.GetAllUsers(message, metadata, options, callback);
        };
        GetUserById: GrpcUnaryServiceInterface<SingleUserIDRequest, User> = (message: SingleUserIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.GetUserById(message, metadata, options, callback);
        };
        GetUsersByMultipleIds: GrpcUnaryServiceInterface<MultipleUserIDRequest, Users> = (message: MultipleUserIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Users>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Users>, callback?: grpc_1.requestCallback<Users>): grpc_1.ClientUnaryCall => {
            return super.GetUsersByMultipleIds(message, metadata, options, callback);
        };
        UpdateUserById: GrpcUnaryServiceInterface<User, User> = (message: User, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.UpdateUserById(message, metadata, options, callback);
        };
        AddUser: GrpcUnaryServiceInterface<User, User> = (message: User, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.AddUser(message, metadata, options, callback);
        };
        DeleteUser: GrpcUnaryServiceInterface<SingleUserIDRequest, User> = (message: SingleUserIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<User>, callback?: grpc_1.requestCallback<User>): grpc_1.ClientUnaryCall => {
            return super.DeleteUser(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedTodoServiceService {
        static definition = {
            PingHealth: {
                path: "/supertodo.TodoService/PingHealth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Health) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Health.deserialize(new Uint8Array(bytes))
            },
            GetAllTodos: {
                path: "/supertodo.TodoService/GetAllTodos",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todos) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todos.deserialize(new Uint8Array(bytes))
            },
            GetTodoById: {
                path: "/supertodo.TodoService/GetTodoById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleTodoIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleTodoIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes))
            },
            GetTodosByMultipleIds: {
                path: "/supertodo.TodoService/GetTodosByMultipleIds",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MultipleTodoIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MultipleTodoIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todos) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todos.deserialize(new Uint8Array(bytes))
            },
            UpdateTodoById: {
                path: "/supertodo.TodoService/UpdateTodoById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Todo) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes))
            },
            AddTodo: {
                path: "/supertodo.TodoService/AddTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Todo) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes))
            },
            DeleteTodo: {
                path: "/supertodo.TodoService/DeleteTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleTodoIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleTodoIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Todo) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Todo.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract PingHealth(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, Health>, callback: grpc_1.sendUnaryData<Health>): void;
        abstract GetAllTodos(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, Todos>, callback: grpc_1.sendUnaryData<Todos>): void;
        abstract GetTodoById(call: grpc_1.ServerUnaryCall<SingleTodoIDRequest, Todo>, callback: grpc_1.sendUnaryData<Todo>): void;
        abstract GetTodosByMultipleIds(call: grpc_1.ServerUnaryCall<MultipleTodoIDRequest, Todos>, callback: grpc_1.sendUnaryData<Todos>): void;
        abstract UpdateTodoById(call: grpc_1.ServerUnaryCall<Todo, Todo>, callback: grpc_1.sendUnaryData<Todo>): void;
        abstract AddTodo(call: grpc_1.ServerUnaryCall<Todo, Todo>, callback: grpc_1.sendUnaryData<Todo>): void;
        abstract DeleteTodo(call: grpc_1.ServerUnaryCall<SingleTodoIDRequest, Todo>, callback: grpc_1.sendUnaryData<Todo>): void;
    }
    export class TodoServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedTodoServiceService.definition, "TodoService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        PingHealth: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, Health> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Health>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Health>, callback?: grpc_1.requestCallback<Health>): grpc_1.ClientUnaryCall => {
            return super.PingHealth(message, metadata, options, callback);
        };
        GetAllTodos: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, Todos> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todos>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todos>, callback?: grpc_1.requestCallback<Todos>): grpc_1.ClientUnaryCall => {
            return super.GetAllTodos(message, metadata, options, callback);
        };
        GetTodoById: GrpcUnaryServiceInterface<SingleTodoIDRequest, Todo> = (message: SingleTodoIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todo>, callback?: grpc_1.requestCallback<Todo>): grpc_1.ClientUnaryCall => {
            return super.GetTodoById(message, metadata, options, callback);
        };
        GetTodosByMultipleIds: GrpcUnaryServiceInterface<MultipleTodoIDRequest, Todos> = (message: MultipleTodoIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todos>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todos>, callback?: grpc_1.requestCallback<Todos>): grpc_1.ClientUnaryCall => {
            return super.GetTodosByMultipleIds(message, metadata, options, callback);
        };
        UpdateTodoById: GrpcUnaryServiceInterface<Todo, Todo> = (message: Todo, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todo>, callback?: grpc_1.requestCallback<Todo>): grpc_1.ClientUnaryCall => {
            return super.UpdateTodoById(message, metadata, options, callback);
        };
        AddTodo: GrpcUnaryServiceInterface<Todo, Todo> = (message: Todo, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todo>, callback?: grpc_1.requestCallback<Todo>): grpc_1.ClientUnaryCall => {
            return super.AddTodo(message, metadata, options, callback);
        };
        DeleteTodo: GrpcUnaryServiceInterface<SingleTodoIDRequest, Todo> = (message: SingleTodoIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Todo>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Todo>, callback?: grpc_1.requestCallback<Todo>): grpc_1.ClientUnaryCall => {
            return super.DeleteTodo(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedCombineServiceService {
        static definition = {
            PingHealth: {
                path: "/supertodo.CombineService/PingHealth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Health) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Health.deserialize(new Uint8Array(bytes))
            },
            GetTodosFromUserId: {
                path: "/supertodo.CombineService/GetTodosFromUserId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleUserIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleUserIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TodosFromUserIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TodosFromUserIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetUsersFromTodoId: {
                path: "/supertodo.CombineService/GetUsersFromTodoId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleTodoIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleTodoIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UsersFromTodoIdResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UsersFromTodoIdResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllCombined: {
                path: "/supertodo.CombineService/GetAllCombined",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MultipleCombined) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MultipleCombined.deserialize(new Uint8Array(bytes))
            },
            AddCombined: {
                path: "/supertodo.CombineService/AddCombined",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CombinedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CombinedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Combined) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Combined.deserialize(new Uint8Array(bytes))
            },
            AddCombinedArray: {
                path: "/supertodo.CombineService/AddCombinedArray",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CombinedArrayRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CombinedArrayRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MultipleCombined) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MultipleCombined.deserialize(new Uint8Array(bytes))
            },
            DeleteCombined: {
                path: "/supertodo.CombineService/DeleteCombined",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CombinedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CombinedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Combined) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Combined.deserialize(new Uint8Array(bytes))
            },
            DeleteTodo: {
                path: "/supertodo.CombineService/DeleteTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleTodoIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleTodoIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MultipleCombined) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MultipleCombined.deserialize(new Uint8Array(bytes))
            },
            DeleteUser: {
                path: "/supertodo.CombineService/DeleteUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SingleUserIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SingleUserIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MultipleCombined) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MultipleCombined.deserialize(new Uint8Array(bytes))
            },
            UpdateTodo: {
                path: "/supertodo.CombineService/UpdateTodo",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CombinedArrayRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CombinedArrayRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MultipleCombined) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MultipleCombined.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract PingHealth(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, Health>, callback: grpc_1.sendUnaryData<Health>): void;
        abstract GetTodosFromUserId(call: grpc_1.ServerUnaryCall<SingleUserIDRequest, TodosFromUserIdResponse>, callback: grpc_1.sendUnaryData<TodosFromUserIdResponse>): void;
        abstract GetUsersFromTodoId(call: grpc_1.ServerUnaryCall<SingleTodoIDRequest, UsersFromTodoIdResponse>, callback: grpc_1.sendUnaryData<UsersFromTodoIdResponse>): void;
        abstract GetAllCombined(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, MultipleCombined>, callback: grpc_1.sendUnaryData<MultipleCombined>): void;
        abstract AddCombined(call: grpc_1.ServerUnaryCall<CombinedRequest, Combined>, callback: grpc_1.sendUnaryData<Combined>): void;
        abstract AddCombinedArray(call: grpc_1.ServerUnaryCall<CombinedArrayRequest, MultipleCombined>, callback: grpc_1.sendUnaryData<MultipleCombined>): void;
        abstract DeleteCombined(call: grpc_1.ServerUnaryCall<CombinedRequest, Combined>, callback: grpc_1.sendUnaryData<Combined>): void;
        abstract DeleteTodo(call: grpc_1.ServerUnaryCall<SingleTodoIDRequest, MultipleCombined>, callback: grpc_1.sendUnaryData<MultipleCombined>): void;
        abstract DeleteUser(call: grpc_1.ServerUnaryCall<SingleUserIDRequest, MultipleCombined>, callback: grpc_1.sendUnaryData<MultipleCombined>): void;
        abstract UpdateTodo(call: grpc_1.ServerUnaryCall<CombinedArrayRequest, MultipleCombined>, callback: grpc_1.sendUnaryData<MultipleCombined>): void;
    }
    export class CombineServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedCombineServiceService.definition, "CombineService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        PingHealth: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, Health> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Health>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Health>, callback?: grpc_1.requestCallback<Health>): grpc_1.ClientUnaryCall => {
            return super.PingHealth(message, metadata, options, callback);
        };
        GetTodosFromUserId: GrpcUnaryServiceInterface<SingleUserIDRequest, TodosFromUserIdResponse> = (message: SingleUserIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TodosFromUserIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TodosFromUserIdResponse>, callback?: grpc_1.requestCallback<TodosFromUserIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetTodosFromUserId(message, metadata, options, callback);
        };
        GetUsersFromTodoId: GrpcUnaryServiceInterface<SingleTodoIDRequest, UsersFromTodoIdResponse> = (message: SingleTodoIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UsersFromTodoIdResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UsersFromTodoIdResponse>, callback?: grpc_1.requestCallback<UsersFromTodoIdResponse>): grpc_1.ClientUnaryCall => {
            return super.GetUsersFromTodoId(message, metadata, options, callback);
        };
        GetAllCombined: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, MultipleCombined> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, callback?: grpc_1.requestCallback<MultipleCombined>): grpc_1.ClientUnaryCall => {
            return super.GetAllCombined(message, metadata, options, callback);
        };
        AddCombined: GrpcUnaryServiceInterface<CombinedRequest, Combined> = (message: CombinedRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Combined>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Combined>, callback?: grpc_1.requestCallback<Combined>): grpc_1.ClientUnaryCall => {
            return super.AddCombined(message, metadata, options, callback);
        };
        AddCombinedArray: GrpcUnaryServiceInterface<CombinedArrayRequest, MultipleCombined> = (message: CombinedArrayRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, callback?: grpc_1.requestCallback<MultipleCombined>): grpc_1.ClientUnaryCall => {
            return super.AddCombinedArray(message, metadata, options, callback);
        };
        DeleteCombined: GrpcUnaryServiceInterface<CombinedRequest, Combined> = (message: CombinedRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Combined>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Combined>, callback?: grpc_1.requestCallback<Combined>): grpc_1.ClientUnaryCall => {
            return super.DeleteCombined(message, metadata, options, callback);
        };
        DeleteTodo: GrpcUnaryServiceInterface<SingleTodoIDRequest, MultipleCombined> = (message: SingleTodoIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, callback?: grpc_1.requestCallback<MultipleCombined>): grpc_1.ClientUnaryCall => {
            return super.DeleteTodo(message, metadata, options, callback);
        };
        DeleteUser: GrpcUnaryServiceInterface<SingleUserIDRequest, MultipleCombined> = (message: SingleUserIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, callback?: grpc_1.requestCallback<MultipleCombined>): grpc_1.ClientUnaryCall => {
            return super.DeleteUser(message, metadata, options, callback);
        };
        UpdateTodo: GrpcUnaryServiceInterface<CombinedArrayRequest, MultipleCombined> = (message: CombinedArrayRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MultipleCombined>, callback?: grpc_1.requestCallback<MultipleCombined>): grpc_1.ClientUnaryCall => {
            return super.UpdateTodo(message, metadata, options, callback);
        };
    }
}
