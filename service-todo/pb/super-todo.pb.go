// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.3
// source: super-todo.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JsonError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *JsonError) Reset() {
	*x = JsonError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonError) ProtoMessage() {}

func (x *JsonError) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonError.ProtoReflect.Descriptor instead.
func (*JsonError) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{0}
}

func (x *JsonError) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JsonError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *JsonError) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Health struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Health) Reset() {
	*x = Health{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Health) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Health) ProtoMessage() {}

func (x *Health) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Health.ProtoReflect.Descriptor instead.
func (*Health) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{1}
}

func (x *Health) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type UserWithTodos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *User  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Todos *Todos `protobuf:"bytes,2,opt,name=todos,proto3" json:"todos,omitempty"`
}

func (x *UserWithTodos) Reset() {
	*x = UserWithTodos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithTodos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithTodos) ProtoMessage() {}

func (x *UserWithTodos) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithTodos.ProtoReflect.Descriptor instead.
func (*UserWithTodos) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{3}
}

func (x *UserWithTodos) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserWithTodos) GetTodos() *Todos {
	if x != nil {
		return x.Todos
	}
	return nil
}

type PutUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *PutUser) Reset() {
	*x = PutUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutUser) ProtoMessage() {}

func (x *PutUser) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutUser.ProtoReflect.Descriptor instead.
func (*PutUser) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{4}
}

func (x *PutUser) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{5}
}

func (x *Users) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type SingleUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SingleUserIDRequest) Reset() {
	*x = SingleUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleUserIDRequest) ProtoMessage() {}

func (x *SingleUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleUserIDRequest.ProtoReflect.Descriptor instead.
func (*SingleUserIDRequest) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{6}
}

func (x *SingleUserIDRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Todo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TodoDate string `protobuf:"bytes,3,opt,name=todo_date,json=todoDate,proto3" json:"todo_date,omitempty"`
	Body     string `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Todo) Reset() {
	*x = Todo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Todo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Todo) ProtoMessage() {}

func (x *Todo) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Todo.ProtoReflect.Descriptor instead.
func (*Todo) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{7}
}

func (x *Todo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Todo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Todo) GetTodoDate() string {
	if x != nil {
		return x.TodoDate
	}
	return ""
}

func (x *Todo) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type TodoWithUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Todo  *Todo  `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
	Users *Users `protobuf:"bytes,2,opt,name=users,proto3" json:"users,omitempty"`
}

func (x *TodoWithUsers) Reset() {
	*x = TodoWithUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodoWithUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoWithUsers) ProtoMessage() {}

func (x *TodoWithUsers) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoWithUsers.ProtoReflect.Descriptor instead.
func (*TodoWithUsers) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{8}
}

func (x *TodoWithUsers) GetTodo() *Todo {
	if x != nil {
		return x.Todo
	}
	return nil
}

func (x *TodoWithUsers) GetUsers() *Users {
	if x != nil {
		return x.Users
	}
	return nil
}

type PutTodo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TodoDate string  `protobuf:"bytes,2,opt,name=todo_date,json=todoDate,proto3" json:"todo_date,omitempty"`
	Body     string  `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	UserIds  []int32 `protobuf:"varint,4,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *PutTodo) Reset() {
	*x = PutTodo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTodo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTodo) ProtoMessage() {}

func (x *PutTodo) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTodo.ProtoReflect.Descriptor instead.
func (*PutTodo) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{9}
}

func (x *PutTodo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PutTodo) GetTodoDate() string {
	if x != nil {
		return x.TodoDate
	}
	return ""
}

func (x *PutTodo) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PutTodo) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type Todos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Todos []*Todo `protobuf:"bytes,1,rep,name=todos,proto3" json:"todos,omitempty"`
}

func (x *Todos) Reset() {
	*x = Todos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Todos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Todos) ProtoMessage() {}

func (x *Todos) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Todos.ProtoReflect.Descriptor instead.
func (*Todos) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{10}
}

func (x *Todos) GetTodos() []*Todo {
	if x != nil {
		return x.Todos
	}
	return nil
}

type Combined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TodoId int32 `protobuf:"varint,3,opt,name=todo_id,json=todoId,proto3" json:"todo_id,omitempty"`
}

func (x *Combined) Reset() {
	*x = Combined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Combined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Combined) ProtoMessage() {}

func (x *Combined) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Combined.ProtoReflect.Descriptor instead.
func (*Combined) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{11}
}

func (x *Combined) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Combined) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Combined) GetTodoId() int32 {
	if x != nil {
		return x.TodoId
	}
	return 0
}

type SingleTodoIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodoId int32 `protobuf:"varint,1,opt,name=todo_id,json=todoId,proto3" json:"todo_id,omitempty"`
}

func (x *SingleTodoIDRequest) Reset() {
	*x = SingleTodoIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleTodoIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleTodoIDRequest) ProtoMessage() {}

func (x *SingleTodoIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleTodoIDRequest.ProtoReflect.Descriptor instead.
func (*SingleTodoIDRequest) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{12}
}

func (x *SingleTodoIDRequest) GetTodoId() int32 {
	if x != nil {
		return x.TodoId
	}
	return 0
}

type MultipleUserIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *MultipleUserIDRequest) Reset() {
	*x = MultipleUserIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleUserIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleUserIDRequest) ProtoMessage() {}

func (x *MultipleUserIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleUserIDRequest.ProtoReflect.Descriptor instead.
func (*MultipleUserIDRequest) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{13}
}

func (x *MultipleUserIDRequest) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type MultipleTodoIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodoIds []int32 `protobuf:"varint,1,rep,packed,name=todo_ids,json=todoIds,proto3" json:"todo_ids,omitempty"`
}

func (x *MultipleTodoIDRequest) Reset() {
	*x = MultipleTodoIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleTodoIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleTodoIDRequest) ProtoMessage() {}

func (x *MultipleTodoIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleTodoIDRequest.ProtoReflect.Descriptor instead.
func (*MultipleTodoIDRequest) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{14}
}

func (x *MultipleTodoIDRequest) GetTodoIds() []int32 {
	if x != nil {
		return x.TodoIds
	}
	return nil
}

type TodosFromUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodoIds []int32 `protobuf:"varint,1,rep,packed,name=todo_ids,json=todoIds,proto3" json:"todo_ids,omitempty"`
}

func (x *TodosFromUserIdResponse) Reset() {
	*x = TodosFromUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodosFromUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodosFromUserIdResponse) ProtoMessage() {}

func (x *TodosFromUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodosFromUserIdResponse.ProtoReflect.Descriptor instead.
func (*TodosFromUserIdResponse) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{15}
}

func (x *TodosFromUserIdResponse) GetTodoIds() []int32 {
	if x != nil {
		return x.TodoIds
	}
	return nil
}

type UsersFromTodoIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIds []int32 `protobuf:"varint,1,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *UsersFromTodoIdResponse) Reset() {
	*x = UsersFromTodoIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersFromTodoIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersFromTodoIdResponse) ProtoMessage() {}

func (x *UsersFromTodoIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersFromTodoIdResponse.ProtoReflect.Descriptor instead.
func (*UsersFromTodoIdResponse) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{16}
}

func (x *UsersFromTodoIdResponse) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type CombinedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TodoId int32 `protobuf:"varint,2,opt,name=todo_id,json=todoId,proto3" json:"todo_id,omitempty"`
}

func (x *CombinedRequest) Reset() {
	*x = CombinedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedRequest) ProtoMessage() {}

func (x *CombinedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinedRequest.ProtoReflect.Descriptor instead.
func (*CombinedRequest) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{17}
}

func (x *CombinedRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CombinedRequest) GetTodoId() int32 {
	if x != nil {
		return x.TodoId
	}
	return 0
}

type MultipleCombined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Combines []*Combined `protobuf:"bytes,1,rep,name=combines,proto3" json:"combines,omitempty"`
}

func (x *MultipleCombined) Reset() {
	*x = MultipleCombined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleCombined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleCombined) ProtoMessage() {}

func (x *MultipleCombined) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleCombined.ProtoReflect.Descriptor instead.
func (*MultipleCombined) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{18}
}

func (x *MultipleCombined) GetCombines() []*Combined {
	if x != nil {
		return x.Combines
	}
	return nil
}

type CombinedArrayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TodoId  int32   `protobuf:"varint,1,opt,name=todo_id,json=todoId,proto3" json:"todo_id,omitempty"`
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *CombinedArrayRequest) Reset() {
	*x = CombinedArrayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_super_todo_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinedArrayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedArrayRequest) ProtoMessage() {}

func (x *CombinedArrayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_super_todo_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinedArrayRequest.ProtoReflect.Descriptor instead.
func (*CombinedArrayRequest) Descriptor() ([]byte, []int) {
	return file_super_todo_proto_rawDescGZIP(), []int{19}
}

func (x *CombinedArrayRequest) GetTodoId() int32 {
	if x != nil {
		return x.TodoId
	}
	return 0
}

func (x *CombinedArrayRequest) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

var File_super_todo_proto protoreflect.FileDescriptor

var file_super_todo_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x09, 0x4a, 0x73,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x20, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x0d, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x64, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x05, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x73,
	0x52, 0x05, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x22, 0x25, 0x0a, 0x07, 0x50, 0x75, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2e,
	0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f,
	0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x2e,
	0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5d,
	0x0a, 0x04, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x64, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x5c, 0x0a,
	0x0d, 0x54, 0x6f, 0x64, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x6f, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x52, 0x04, 0x74,
	0x6f, 0x64, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x6b, 0x0a, 0x07, 0x50,
	0x75, 0x74, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x64, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x05, 0x54, 0x6f, 0x64, 0x6f,
	0x73, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64,
	0x6f, 0x52, 0x05, 0x74, 0x6f, 0x64, 0x6f, 0x73, 0x22, 0x4c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x6f, 0x64, 0x6f, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x6f, 0x64, 0x6f, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x15, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x64, 0x6f, 0x49, 0x64, 0x73, 0x22, 0x34,
	0x0a, 0x17, 0x54, 0x6f, 0x64, 0x6f, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x64,
	0x6f, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x64,
	0x6f, 0x49, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x64, 0x6f, 0x49, 0x64, 0x22,
	0x43, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64,
	0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x6f, 0x64, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x6f, 0x64, 0x6f, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x32, 0xba, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f,
	0x64, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x10, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64,
	0x6f, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x20, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2d, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x32, 0xba, 0x03,
	0x0a, 0x0b, 0x54, 0x6f, 0x64, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x54, 0x6f, 0x64, 0x6f, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x10, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f,
	0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x6f, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x54,
	0x6f, 0x64, 0x6f, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x64, 0x6f,
	0x73, 0x42, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64,
	0x6f, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x64, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f,
	0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74,
	0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64,
	0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f,
	0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74,
	0x6f, 0x64, 0x6f, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74,
	0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x22, 0x00, 0x32, 0x8f, 0x06, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x64, 0x6f, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x64,
	0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x6f, 0x64, 0x6f, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x1f, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x65, 0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x00, 0x12,
	0x43, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x64, 0x12, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x64, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x64, 0x6f, 0x12, 0x1e, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1e, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x64, 0x6f, 0x12, 0x1f, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x74, 0x6f, 0x64, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_super_todo_proto_rawDescOnce sync.Once
	file_super_todo_proto_rawDescData = file_super_todo_proto_rawDesc
)

func file_super_todo_proto_rawDescGZIP() []byte {
	file_super_todo_proto_rawDescOnce.Do(func() {
		file_super_todo_proto_rawDescData = protoimpl.X.CompressGZIP(file_super_todo_proto_rawDescData)
	})
	return file_super_todo_proto_rawDescData
}

var file_super_todo_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_super_todo_proto_goTypes = []interface{}{
	(*JsonError)(nil),               // 0: supertodo.JsonError
	(*Health)(nil),                  // 1: supertodo.Health
	(*User)(nil),                    // 2: supertodo.User
	(*UserWithTodos)(nil),           // 3: supertodo.UserWithTodos
	(*PutUser)(nil),                 // 4: supertodo.PutUser
	(*Users)(nil),                   // 5: supertodo.Users
	(*SingleUserIDRequest)(nil),     // 6: supertodo.SingleUserIDRequest
	(*Todo)(nil),                    // 7: supertodo.Todo
	(*TodoWithUsers)(nil),           // 8: supertodo.TodoWithUsers
	(*PutTodo)(nil),                 // 9: supertodo.PutTodo
	(*Todos)(nil),                   // 10: supertodo.Todos
	(*Combined)(nil),                // 11: supertodo.Combined
	(*SingleTodoIDRequest)(nil),     // 12: supertodo.SingleTodoIDRequest
	(*MultipleUserIDRequest)(nil),   // 13: supertodo.MultipleUserIDRequest
	(*MultipleTodoIDRequest)(nil),   // 14: supertodo.MultipleTodoIDRequest
	(*TodosFromUserIdResponse)(nil), // 15: supertodo.TodosFromUserIdResponse
	(*UsersFromTodoIdResponse)(nil), // 16: supertodo.UsersFromTodoIdResponse
	(*CombinedRequest)(nil),         // 17: supertodo.CombinedRequest
	(*MultipleCombined)(nil),        // 18: supertodo.MultipleCombined
	(*CombinedArrayRequest)(nil),    // 19: supertodo.CombinedArrayRequest
	(*emptypb.Empty)(nil),           // 20: google.protobuf.Empty
}
var file_super_todo_proto_depIdxs = []int32{
	2,  // 0: supertodo.UserWithTodos.user:type_name -> supertodo.User
	10, // 1: supertodo.UserWithTodos.todos:type_name -> supertodo.Todos
	2,  // 2: supertodo.Users.users:type_name -> supertodo.User
	7,  // 3: supertodo.TodoWithUsers.todo:type_name -> supertodo.Todo
	5,  // 4: supertodo.TodoWithUsers.users:type_name -> supertodo.Users
	7,  // 5: supertodo.Todos.todos:type_name -> supertodo.Todo
	11, // 6: supertodo.MultipleCombined.combines:type_name -> supertodo.Combined
	20, // 7: supertodo.UserService.PingHealth:input_type -> google.protobuf.Empty
	20, // 8: supertodo.UserService.GetAllUsers:input_type -> google.protobuf.Empty
	6,  // 9: supertodo.UserService.GetUserById:input_type -> supertodo.SingleUserIDRequest
	13, // 10: supertodo.UserService.GetUsersByMultipleIds:input_type -> supertodo.MultipleUserIDRequest
	2,  // 11: supertodo.UserService.UpdateUserById:input_type -> supertodo.User
	2,  // 12: supertodo.UserService.AddUser:input_type -> supertodo.User
	6,  // 13: supertodo.UserService.DeleteUser:input_type -> supertodo.SingleUserIDRequest
	20, // 14: supertodo.TodoService.PingHealth:input_type -> google.protobuf.Empty
	20, // 15: supertodo.TodoService.GetAllTodos:input_type -> google.protobuf.Empty
	12, // 16: supertodo.TodoService.GetTodoById:input_type -> supertodo.SingleTodoIDRequest
	14, // 17: supertodo.TodoService.GetTodosByMultipleIds:input_type -> supertodo.MultipleTodoIDRequest
	7,  // 18: supertodo.TodoService.UpdateTodoById:input_type -> supertodo.Todo
	7,  // 19: supertodo.TodoService.AddTodo:input_type -> supertodo.Todo
	12, // 20: supertodo.TodoService.DeleteTodo:input_type -> supertodo.SingleTodoIDRequest
	20, // 21: supertodo.CombineService.PingHealth:input_type -> google.protobuf.Empty
	6,  // 22: supertodo.CombineService.GetTodosFromUserId:input_type -> supertodo.SingleUserIDRequest
	12, // 23: supertodo.CombineService.GetUsersFromTodoId:input_type -> supertodo.SingleTodoIDRequest
	20, // 24: supertodo.CombineService.GetAllCombined:input_type -> google.protobuf.Empty
	17, // 25: supertodo.CombineService.AddCombined:input_type -> supertodo.CombinedRequest
	19, // 26: supertodo.CombineService.AddCombinedArray:input_type -> supertodo.CombinedArrayRequest
	17, // 27: supertodo.CombineService.DeleteCombined:input_type -> supertodo.CombinedRequest
	12, // 28: supertodo.CombineService.DeleteTodo:input_type -> supertodo.SingleTodoIDRequest
	6,  // 29: supertodo.CombineService.DeleteUser:input_type -> supertodo.SingleUserIDRequest
	19, // 30: supertodo.CombineService.UpdateTodo:input_type -> supertodo.CombinedArrayRequest
	1,  // 31: supertodo.UserService.PingHealth:output_type -> supertodo.Health
	5,  // 32: supertodo.UserService.GetAllUsers:output_type -> supertodo.Users
	2,  // 33: supertodo.UserService.GetUserById:output_type -> supertodo.User
	5,  // 34: supertodo.UserService.GetUsersByMultipleIds:output_type -> supertodo.Users
	2,  // 35: supertodo.UserService.UpdateUserById:output_type -> supertodo.User
	2,  // 36: supertodo.UserService.AddUser:output_type -> supertodo.User
	2,  // 37: supertodo.UserService.DeleteUser:output_type -> supertodo.User
	1,  // 38: supertodo.TodoService.PingHealth:output_type -> supertodo.Health
	10, // 39: supertodo.TodoService.GetAllTodos:output_type -> supertodo.Todos
	7,  // 40: supertodo.TodoService.GetTodoById:output_type -> supertodo.Todo
	10, // 41: supertodo.TodoService.GetTodosByMultipleIds:output_type -> supertodo.Todos
	7,  // 42: supertodo.TodoService.UpdateTodoById:output_type -> supertodo.Todo
	7,  // 43: supertodo.TodoService.AddTodo:output_type -> supertodo.Todo
	7,  // 44: supertodo.TodoService.DeleteTodo:output_type -> supertodo.Todo
	1,  // 45: supertodo.CombineService.PingHealth:output_type -> supertodo.Health
	15, // 46: supertodo.CombineService.GetTodosFromUserId:output_type -> supertodo.TodosFromUserIdResponse
	16, // 47: supertodo.CombineService.GetUsersFromTodoId:output_type -> supertodo.UsersFromTodoIdResponse
	18, // 48: supertodo.CombineService.GetAllCombined:output_type -> supertodo.MultipleCombined
	11, // 49: supertodo.CombineService.AddCombined:output_type -> supertodo.Combined
	18, // 50: supertodo.CombineService.AddCombinedArray:output_type -> supertodo.MultipleCombined
	11, // 51: supertodo.CombineService.DeleteCombined:output_type -> supertodo.Combined
	18, // 52: supertodo.CombineService.DeleteTodo:output_type -> supertodo.MultipleCombined
	18, // 53: supertodo.CombineService.DeleteUser:output_type -> supertodo.MultipleCombined
	18, // 54: supertodo.CombineService.UpdateTodo:output_type -> supertodo.MultipleCombined
	31, // [31:55] is the sub-list for method output_type
	7,  // [7:31] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_super_todo_proto_init() }
func file_super_todo_proto_init() {
	if File_super_todo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_super_todo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Health); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithTodos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Todo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodoWithUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTodo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Todos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Combined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleTodoIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleUserIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleTodoIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodosFromUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersFromTodoIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleCombined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_super_todo_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinedArrayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_super_todo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_super_todo_proto_goTypes,
		DependencyIndexes: file_super_todo_proto_depIdxs,
		MessageInfos:      file_super_todo_proto_msgTypes,
	}.Build()
	File_super_todo_proto = out.File
	file_super_todo_proto_rawDesc = nil
	file_super_todo_proto_goTypes = nil
	file_super_todo_proto_depIdxs = nil
}
