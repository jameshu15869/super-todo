// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: super-todo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	PingHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error)
	GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Users, error)
	GetUserById(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*User, error)
	GetUsersByMultipleIds(ctx context.Context, in *MultipleUserIDRequest, opts ...grpc.CallOption) (*Users, error)
	UpdateUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) PingHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/supertodo.UserService/PingHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/supertodo.UserService/GetAllUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserById(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/supertodo.UserService/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsersByMultipleIds(ctx context.Context, in *MultipleUserIDRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/supertodo.UserService/GetUsersByMultipleIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/supertodo.UserService/UpdateUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/supertodo.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/supertodo.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	PingHealth(context.Context, *emptypb.Empty) (*Health, error)
	GetAllUsers(context.Context, *emptypb.Empty) (*Users, error)
	GetUserById(context.Context, *SingleUserIDRequest) (*User, error)
	GetUsersByMultipleIds(context.Context, *MultipleUserIDRequest) (*Users, error)
	UpdateUserById(context.Context, *User) (*User, error)
	AddUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *SingleUserIDRequest) (*User, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) PingHealth(context.Context, *emptypb.Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingHealth not implemented")
}
func (UnimplementedUserServiceServer) GetAllUsers(context.Context, *emptypb.Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsers not implemented")
}
func (UnimplementedUserServiceServer) GetUserById(context.Context, *SingleUserIDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServiceServer) GetUsersByMultipleIds(context.Context, *MultipleUserIDRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByMultipleIds not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserById(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserById not implemented")
}
func (UnimplementedUserServiceServer) AddUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *SingleUserIDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_PingHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PingHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.UserService/PingHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PingHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.UserService/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUsers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.UserService/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserById(ctx, req.(*SingleUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsersByMultipleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsersByMultipleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.UserService/GetUsersByMultipleIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsersByMultipleIds(ctx, req.(*MultipleUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.UserService/UpdateUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserById(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*SingleUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supertodo.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingHealth",
			Handler:    _UserService_PingHealth_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _UserService_GetAllUsers_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserService_GetUserById_Handler,
		},
		{
			MethodName: "GetUsersByMultipleIds",
			Handler:    _UserService_GetUsersByMultipleIds_Handler,
		},
		{
			MethodName: "UpdateUserById",
			Handler:    _UserService_UpdateUserById_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "super-todo.proto",
}

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	PingHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error)
	GetAllTodos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Todos, error)
	GetTodoById(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*Todo, error)
	GetTodosByMultipleIds(ctx context.Context, in *MultipleTodoIDRequest, opts ...grpc.CallOption) (*Todos, error)
	UpdateTodoById(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error)
	AddTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error)
	DeleteTodo(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*Todo, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) PingHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/supertodo.TodoService/PingHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetAllTodos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Todos, error) {
	out := new(Todos)
	err := c.cc.Invoke(ctx, "/supertodo.TodoService/GetAllTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoById(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/supertodo.TodoService/GetTodoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodosByMultipleIds(ctx context.Context, in *MultipleTodoIDRequest, opts ...grpc.CallOption) (*Todos, error) {
	out := new(Todos)
	err := c.cc.Invoke(ctx, "/supertodo.TodoService/GetTodosByMultipleIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateTodoById(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/supertodo.TodoService/UpdateTodoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) AddTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/supertodo.TodoService/AddTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodo(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/supertodo.TodoService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	PingHealth(context.Context, *emptypb.Empty) (*Health, error)
	GetAllTodos(context.Context, *emptypb.Empty) (*Todos, error)
	GetTodoById(context.Context, *SingleTodoIDRequest) (*Todo, error)
	GetTodosByMultipleIds(context.Context, *MultipleTodoIDRequest) (*Todos, error)
	UpdateTodoById(context.Context, *Todo) (*Todo, error)
	AddTodo(context.Context, *Todo) (*Todo, error)
	DeleteTodo(context.Context, *SingleTodoIDRequest) (*Todo, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) PingHealth(context.Context, *emptypb.Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingHealth not implemented")
}
func (UnimplementedTodoServiceServer) GetAllTodos(context.Context, *emptypb.Empty) (*Todos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTodos not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoById(context.Context, *SingleTodoIDRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoById not implemented")
}
func (UnimplementedTodoServiceServer) GetTodosByMultipleIds(context.Context, *MultipleTodoIDRequest) (*Todos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodosByMultipleIds not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodoById(context.Context, *Todo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoById not implemented")
}
func (UnimplementedTodoServiceServer) AddTodo(context.Context, *Todo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTodo not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodo(context.Context, *SingleTodoIDRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_PingHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).PingHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.TodoService/PingHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).PingHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetAllTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetAllTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.TodoService/GetAllTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetAllTodos(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTodoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.TodoService/GetTodoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoById(ctx, req.(*SingleTodoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodosByMultipleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleTodoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodosByMultipleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.TodoService/GetTodosByMultipleIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodosByMultipleIds(ctx, req.(*MultipleTodoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.TodoService/UpdateTodoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodoById(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_AddTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).AddTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.TodoService/AddTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).AddTodo(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTodoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.TodoService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodo(ctx, req.(*SingleTodoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supertodo.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingHealth",
			Handler:    _TodoService_PingHealth_Handler,
		},
		{
			MethodName: "GetAllTodos",
			Handler:    _TodoService_GetAllTodos_Handler,
		},
		{
			MethodName: "GetTodoById",
			Handler:    _TodoService_GetTodoById_Handler,
		},
		{
			MethodName: "GetTodosByMultipleIds",
			Handler:    _TodoService_GetTodosByMultipleIds_Handler,
		},
		{
			MethodName: "UpdateTodoById",
			Handler:    _TodoService_UpdateTodoById_Handler,
		},
		{
			MethodName: "AddTodo",
			Handler:    _TodoService_AddTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoService_DeleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "super-todo.proto",
}

// CombineServiceClient is the client API for CombineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CombineServiceClient interface {
	PingHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error)
	GetTodosFromUserId(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*TodosFromUserIdResponse, error)
	GetUsersFromTodoId(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*UsersFromTodoIdResponse, error)
	GetAllCombined(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleCombined, error)
	AddCombined(ctx context.Context, in *CombinedRequest, opts ...grpc.CallOption) (*Combined, error)
	AddCombinedArray(ctx context.Context, in *CombinedArrayRequest, opts ...grpc.CallOption) (*MultipleCombined, error)
	DeleteCombined(ctx context.Context, in *CombinedRequest, opts ...grpc.CallOption) (*Combined, error)
	DeleteTodo(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*MultipleCombined, error)
	DeleteUser(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*MultipleCombined, error)
	UpdateTodo(ctx context.Context, in *CombinedArrayRequest, opts ...grpc.CallOption) (*MultipleCombined, error)
}

type combineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCombineServiceClient(cc grpc.ClientConnInterface) CombineServiceClient {
	return &combineServiceClient{cc}
}

func (c *combineServiceClient) PingHealth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/PingHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) GetTodosFromUserId(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*TodosFromUserIdResponse, error) {
	out := new(TodosFromUserIdResponse)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/GetTodosFromUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) GetUsersFromTodoId(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*UsersFromTodoIdResponse, error) {
	out := new(UsersFromTodoIdResponse)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/GetUsersFromTodoId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) GetAllCombined(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultipleCombined, error) {
	out := new(MultipleCombined)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/GetAllCombined", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) AddCombined(ctx context.Context, in *CombinedRequest, opts ...grpc.CallOption) (*Combined, error) {
	out := new(Combined)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/AddCombined", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) AddCombinedArray(ctx context.Context, in *CombinedArrayRequest, opts ...grpc.CallOption) (*MultipleCombined, error) {
	out := new(MultipleCombined)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/AddCombinedArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) DeleteCombined(ctx context.Context, in *CombinedRequest, opts ...grpc.CallOption) (*Combined, error) {
	out := new(Combined)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/DeleteCombined", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) DeleteTodo(ctx context.Context, in *SingleTodoIDRequest, opts ...grpc.CallOption) (*MultipleCombined, error) {
	out := new(MultipleCombined)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) DeleteUser(ctx context.Context, in *SingleUserIDRequest, opts ...grpc.CallOption) (*MultipleCombined, error) {
	out := new(MultipleCombined)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combineServiceClient) UpdateTodo(ctx context.Context, in *CombinedArrayRequest, opts ...grpc.CallOption) (*MultipleCombined, error) {
	out := new(MultipleCombined)
	err := c.cc.Invoke(ctx, "/supertodo.CombineService/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CombineServiceServer is the server API for CombineService service.
// All implementations must embed UnimplementedCombineServiceServer
// for forward compatibility
type CombineServiceServer interface {
	PingHealth(context.Context, *emptypb.Empty) (*Health, error)
	GetTodosFromUserId(context.Context, *SingleUserIDRequest) (*TodosFromUserIdResponse, error)
	GetUsersFromTodoId(context.Context, *SingleTodoIDRequest) (*UsersFromTodoIdResponse, error)
	GetAllCombined(context.Context, *emptypb.Empty) (*MultipleCombined, error)
	AddCombined(context.Context, *CombinedRequest) (*Combined, error)
	AddCombinedArray(context.Context, *CombinedArrayRequest) (*MultipleCombined, error)
	DeleteCombined(context.Context, *CombinedRequest) (*Combined, error)
	DeleteTodo(context.Context, *SingleTodoIDRequest) (*MultipleCombined, error)
	DeleteUser(context.Context, *SingleUserIDRequest) (*MultipleCombined, error)
	UpdateTodo(context.Context, *CombinedArrayRequest) (*MultipleCombined, error)
	mustEmbedUnimplementedCombineServiceServer()
}

// UnimplementedCombineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCombineServiceServer struct {
}

func (UnimplementedCombineServiceServer) PingHealth(context.Context, *emptypb.Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingHealth not implemented")
}
func (UnimplementedCombineServiceServer) GetTodosFromUserId(context.Context, *SingleUserIDRequest) (*TodosFromUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodosFromUserId not implemented")
}
func (UnimplementedCombineServiceServer) GetUsersFromTodoId(context.Context, *SingleTodoIDRequest) (*UsersFromTodoIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersFromTodoId not implemented")
}
func (UnimplementedCombineServiceServer) GetAllCombined(context.Context, *emptypb.Empty) (*MultipleCombined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCombined not implemented")
}
func (UnimplementedCombineServiceServer) AddCombined(context.Context, *CombinedRequest) (*Combined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCombined not implemented")
}
func (UnimplementedCombineServiceServer) AddCombinedArray(context.Context, *CombinedArrayRequest) (*MultipleCombined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCombinedArray not implemented")
}
func (UnimplementedCombineServiceServer) DeleteCombined(context.Context, *CombinedRequest) (*Combined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCombined not implemented")
}
func (UnimplementedCombineServiceServer) DeleteTodo(context.Context, *SingleTodoIDRequest) (*MultipleCombined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedCombineServiceServer) DeleteUser(context.Context, *SingleUserIDRequest) (*MultipleCombined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCombineServiceServer) UpdateTodo(context.Context, *CombinedArrayRequest) (*MultipleCombined, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedCombineServiceServer) mustEmbedUnimplementedCombineServiceServer() {}

// UnsafeCombineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CombineServiceServer will
// result in compilation errors.
type UnsafeCombineServiceServer interface {
	mustEmbedUnimplementedCombineServiceServer()
}

func RegisterCombineServiceServer(s grpc.ServiceRegistrar, srv CombineServiceServer) {
	s.RegisterService(&CombineService_ServiceDesc, srv)
}

func _CombineService_PingHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).PingHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/PingHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).PingHealth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_GetTodosFromUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).GetTodosFromUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/GetTodosFromUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).GetTodosFromUserId(ctx, req.(*SingleUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_GetUsersFromTodoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTodoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).GetUsersFromTodoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/GetUsersFromTodoId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).GetUsersFromTodoId(ctx, req.(*SingleTodoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_GetAllCombined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).GetAllCombined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/GetAllCombined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).GetAllCombined(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_AddCombined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombinedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).AddCombined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/AddCombined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).AddCombined(ctx, req.(*CombinedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_AddCombinedArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombinedArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).AddCombinedArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/AddCombinedArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).AddCombinedArray(ctx, req.(*CombinedArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_DeleteCombined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombinedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).DeleteCombined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/DeleteCombined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).DeleteCombined(ctx, req.(*CombinedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleTodoIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).DeleteTodo(ctx, req.(*SingleTodoIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).DeleteUser(ctx, req.(*SingleUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CombineService_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CombinedArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombineServiceServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supertodo.CombineService/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombineServiceServer).UpdateTodo(ctx, req.(*CombinedArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CombineService_ServiceDesc is the grpc.ServiceDesc for CombineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CombineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supertodo.CombineService",
	HandlerType: (*CombineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingHealth",
			Handler:    _CombineService_PingHealth_Handler,
		},
		{
			MethodName: "GetTodosFromUserId",
			Handler:    _CombineService_GetTodosFromUserId_Handler,
		},
		{
			MethodName: "GetUsersFromTodoId",
			Handler:    _CombineService_GetUsersFromTodoId_Handler,
		},
		{
			MethodName: "GetAllCombined",
			Handler:    _CombineService_GetAllCombined_Handler,
		},
		{
			MethodName: "AddCombined",
			Handler:    _CombineService_AddCombined_Handler,
		},
		{
			MethodName: "AddCombinedArray",
			Handler:    _CombineService_AddCombinedArray_Handler,
		},
		{
			MethodName: "DeleteCombined",
			Handler:    _CombineService_DeleteCombined_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _CombineService_DeleteTodo_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CombineService_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _CombineService_UpdateTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "super-todo.proto",
}
